什么是 MVVM
首先我们需要先知道什么是 MVP 以及 MVP 是怎么从 MVC 演变过来的
MVP 中的 P 层是 presenter 作为呈现管理
主要是操作 M 层方法去更新数据以及对视图的管理，而这种方式有缺陷
P 层的逻辑局限于单个项目的应用，没有进行模型抽象封装，没有形成 presentation model
不具备复用性，所以如果想要复用这种方式，要对其进行抽象封装

MVVM 历史早期是 MVPM 这个名称，最开始是桌面应用开始使用的
MVVM 是 M 层与 V 层的分离，但是使用 PM 来描述两者之间关系又显得不是很恰当
所以后来才使用 VM 来作为一种新的描述形式，作为两者之间的桥梁

实际上我们在编写 Vue 时，每一个组件内通过 export default 暴露的实例对象就是在描述 M 层
而 Vue 文件中 template 就是在描述 V 层，中间交给 VM 层去帮我们处理视图与数据逻辑的绑定
M 层与 V 层发生变更必须是由 VM 去帮我们处理，所以 MVVM 是具备一定规范的，M 层是不能够直接去操作 DOM 的

Angular 是 MVW 框架
数据更新与管理是由 VM 来做但是在组件中 Angular 提供了给你 API 操作真实节点方法
所以 Angular 认为数据的绑定帮你去做，组件中随便你怎么操作也就是 W 层 whatever

为什么 React 称自己只关注于视图的库
React 中编写 class 组件对于方法逻辑状态都很难进行抽离
所有的方法逻辑和状态都是为了给视图 render 函数而使用的
所以 React 说的很明确自身框架只是关注于视图渲染的库而已
至于后面怎么做的视图更新、事件绑定、虚拟 DOM、Fiber架构你别管

Vue2 与 Vue3 的差异
3 的版本在 2 基础上增加了 CompositionAPI 使组件方法逻辑更容易抽离
2 的版本对于做中小型项目的约束力更强更容易上手，但是对于大型项目设计却很复杂
3 的 API 更适合去做大型项目，更容易让你在组件外脚本中抽离一些逻辑
从而减小项目的复杂度、提高稳定性，使组件横向切割更加容易
